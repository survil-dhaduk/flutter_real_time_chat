// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_real_time_chat/test/features/chat/data/repositories/chat_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_real_time_chat/core/services/user_context_service.dart'
    as _i7;
import 'package:flutter_real_time_chat/core/utils/logger.dart' as _i4;
import 'package:flutter_real_time_chat/features/auth/domain/entities/user.dart'
    as _i8;
import 'package:flutter_real_time_chat/features/chat/data/datasources/chat_remote_data_source.dart'
    as _i5;
import 'package:flutter_real_time_chat/features/chat/data/models/chat_room_model.dart'
    as _i2;
import 'package:flutter_real_time_chat/features/chat/data/models/message_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatRoomModel_0 extends _i1.SmartFake implements _i2.ChatRoomModel {
  _FakeChatRoomModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageModel_1 extends _i1.SmartFake implements _i3.MessageModel {
  _FakeMessageModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_2 extends _i1.SmartFake implements _i4.Logger {
  _FakeLogger_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRemoteDataSource extends _i1.Mock
    implements _i5.ChatRemoteDataSource {
  MockChatRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.ChatRoomModel>> getChatRooms() => (super.noSuchMethod(
        Invocation.method(
          #getChatRooms,
          [],
        ),
        returnValue:
            _i6.Future<List<_i2.ChatRoomModel>>.value(<_i2.ChatRoomModel>[]),
      ) as _i6.Future<List<_i2.ChatRoomModel>>);

  @override
  _i6.Future<_i2.ChatRoomModel> createChatRoom({
    required String? name,
    required String? description,
    required String? createdBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createChatRoom,
          [],
          {
            #name: name,
            #description: description,
            #createdBy: createdBy,
          },
        ),
        returnValue: _i6.Future<_i2.ChatRoomModel>.value(_FakeChatRoomModel_0(
          this,
          Invocation.method(
            #createChatRoom,
            [],
            {
              #name: name,
              #description: description,
              #createdBy: createdBy,
            },
          ),
        )),
      ) as _i6.Future<_i2.ChatRoomModel>);

  @override
  _i6.Future<void> joinChatRoom({
    required String? roomId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinChatRoom,
          [],
          {
            #roomId: roomId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.MessageModel> sendMessage({
    required String? roomId,
    required String? senderId,
    required String? content,
    required String? messageType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #roomId: roomId,
            #senderId: senderId,
            #content: content,
            #messageType: messageType,
          },
        ),
        returnValue: _i6.Future<_i3.MessageModel>.value(_FakeMessageModel_1(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #roomId: roomId,
              #senderId: senderId,
              #content: content,
              #messageType: messageType,
            },
          ),
        )),
      ) as _i6.Future<_i3.MessageModel>);

  @override
  _i6.Stream<List<_i3.MessageModel>> getMessages(String? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessages,
          [roomId],
        ),
        returnValue: _i6.Stream<List<_i3.MessageModel>>.empty(),
      ) as _i6.Stream<List<_i3.MessageModel>>);

  @override
  _i6.Stream<List<_i2.ChatRoomModel>> getChatRoomsStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getChatRoomsStream,
          [],
        ),
        returnValue: _i6.Stream<List<_i2.ChatRoomModel>>.empty(),
      ) as _i6.Stream<List<_i2.ChatRoomModel>>);

  @override
  _i6.Future<void> markMessageAsRead({
    required String? messageId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markMessageAsRead,
          [],
          {
            #messageId: messageId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateMessageStatus({
    required String? messageId,
    required String? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMessageStatus,
          [],
          {
            #messageId: messageId,
            #status: status,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<String>> getRoomParticipants(String? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoomParticipants,
          [roomId],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  _i6.Future<void> leaveChatRoom({
    required String? roomId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveChatRoom,
          [],
          {
            #roomId: roomId,
            #userId: userId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i4.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message) => super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Logger withTag(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #withTag,
          [tag],
        ),
        returnValue: _FakeLogger_2(
          this,
          Invocation.method(
            #withTag,
            [tag],
          ),
        ),
      ) as _i4.Logger);
}

/// A class which mocks [UserContextService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserContextService extends _i1.Mock
    implements _i7.UserContextService {
  MockUserContextService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void updateCurrentUser(_i8.User? user) => super.noSuchMethod(
        Invocation.method(
          #updateCurrentUser,
          [user],
        ),
        returnValueForMissingStub: null,
      );
}
