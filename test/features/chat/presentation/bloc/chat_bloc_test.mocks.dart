// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_real_time_chat/test/features/chat/presentation/bloc/chat_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i17;
import 'package:flutter_real_time_chat/core/errors/failures.dart' as _i7;
import 'package:flutter_real_time_chat/features/chat/domain/entities/chat_room.dart'
    as _i8;
import 'package:flutter_real_time_chat/features/chat/domain/entities/message.dart'
    as _i12;
import 'package:flutter_real_time_chat/features/chat/domain/repositories/chat_repository.dart'
    as _i2;
import 'package:flutter_real_time_chat/features/chat/domain/usecases/create_chat_room.dart'
    as _i9;
import 'package:flutter_real_time_chat/features/chat/domain/usecases/get_chat_rooms.dart'
    as _i5;
import 'package:flutter_real_time_chat/features/chat/domain/usecases/get_messages.dart'
    as _i13;
import 'package:flutter_real_time_chat/features/chat/domain/usecases/join_chat_room.dart'
    as _i10;
import 'package:flutter_real_time_chat/features/chat/domain/usecases/mark_message_as_read.dart'
    as _i14;
import 'package:flutter_real_time_chat/features/chat/domain/usecases/send_message.dart'
    as _i11;
import 'package:flutter_real_time_chat/features/chat/presentation/bloc/chat_bloc.dart'
    as _i15;
import 'package:flutter_real_time_chat/features/chat/presentation/bloc/chat_event.dart'
    as _i16;
import 'package:flutter_real_time_chat/features/chat/presentation/bloc/chat_state.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatRepository_0 extends _i1.SmartFake
    implements _i2.ChatRepository {
  _FakeChatRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChatState_2 extends _i1.SmartFake implements _i4.ChatState {
  _FakeChatState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetChatRoomsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetChatRoomsUseCase extends _i1.Mock
    implements _i5.GetChatRoomsUseCase {
  MockGetChatRoomsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i8.ChatRoom>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i8.ChatRoom>>>.value(
                _FakeEither_1<_i7.Failure, List<_i8.ChatRoom>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i8.ChatRoom>>>);

  @override
  _i6.Stream<List<_i8.ChatRoom>> getChatRoomsStream() => (super.noSuchMethod(
        Invocation.method(
          #getChatRoomsStream,
          [],
        ),
        returnValue: _i6.Stream<List<_i8.ChatRoom>>.empty(),
      ) as _i6.Stream<List<_i8.ChatRoom>>);
}

/// A class which mocks [CreateChatRoomUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateChatRoomUseCase extends _i1.Mock
    implements _i9.CreateChatRoomUseCase {
  MockCreateChatRoomUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.ChatRoom>> call(
          _i9.CreateChatRoomParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.ChatRoom>>.value(
            _FakeEither_1<_i7.Failure, _i8.ChatRoom>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.ChatRoom>>);
}

/// A class which mocks [JoinChatRoomUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockJoinChatRoomUseCase extends _i1.Mock
    implements _i10.JoinChatRoomUseCase {
  MockJoinChatRoomUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.ChatRoom>> call(
          _i10.JoinChatRoomParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.ChatRoom>>.value(
            _FakeEither_1<_i7.Failure, _i8.ChatRoom>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.ChatRoom>>);
}

/// A class which mocks [SendMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUseCase extends _i1.Mock
    implements _i11.SendMessageUseCase {
  MockSendMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i12.Message>> call(
          _i11.SendMessageParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i12.Message>>.value(
            _FakeEither_1<_i7.Failure, _i12.Message>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i12.Message>>);
}

/// A class which mocks [GetMessagesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMessagesUseCase extends _i1.Mock
    implements _i13.GetMessagesUseCase {
  MockGetMessagesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i12.Message>>> call(
          _i13.GetMessagesParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, List<_i12.Message>>>.value(
                _FakeEither_1<_i7.Failure, List<_i12.Message>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i12.Message>>>);

  @override
  _i6.Stream<List<_i12.Message>> getMessagesStream(String? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMessagesStream,
          [roomId],
        ),
        returnValue: _i6.Stream<List<_i12.Message>>.empty(),
      ) as _i6.Stream<List<_i12.Message>>);
}

/// A class which mocks [MarkMessageAsReadUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkMessageAsReadUseCase extends _i1.Mock
    implements _i14.MarkMessageAsReadUseCase {
  MockMarkMessageAsReadUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> call(
          _i14.MarkMessageAsReadParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, void>>.value(
            _FakeEither_1<_i7.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, void>>);

  @override
  _i6.Future<_i3.Either<_i7.Failure, void>> markAllMessagesAsRead(
          _i14.MarkAllMessagesAsReadParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAllMessagesAsRead,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, void>>.value(
            _FakeEither_1<_i7.Failure, void>(
          this,
          Invocation.method(
            #markAllMessagesAsRead,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, void>>);
}

/// A class which mocks [ChatBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatBloc extends _i1.Mock implements _i15.ChatBloc {
  MockChatBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChatState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeChatState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.ChatState);

  @override
  _i6.Stream<_i4.ChatState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.ChatState>.empty(),
      ) as _i6.Stream<_i4.ChatState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void add(_i16.ChatEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i16.ChatEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.ChatState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i16.ChatEvent>(
    _i17.EventHandler<E, _i4.ChatState>? handler, {
    _i17.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i17.Transition<_i16.ChatEvent, _i4.ChatState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i17.Change<_i4.ChatState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
